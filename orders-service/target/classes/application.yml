server:
  port: 8081
spring:
  application:
    name: orders-service
  config:
    import: optional:configserver:http://${HOST_NAME:localhost}:8888
  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: http://${KC_HOST:localhost}:${KC_PORT:8080}/auth/realms/rental_cars
      client:
        registration:
          rental-cars-client:
            provider: keycloak
            authorization-grant-type: client_credentials
            scope: openid
            client-id: rental-cars-client
            client-secret: Nr4m2n42bpjsikbFUAk1j6QkuITkfHWF
        provider:
          keycloak:
            issuer-uri:  http://${KC_HOST:localhost}:${KC_PORT:8080}/auth/realms/rental_cars
  cloud:
    consul:
      port: ${CONSUL_PORT:8500}
      host: ${CONSUL_HOST:localhost}
    openfeign:
      client:
        default-to-properties: 'false'
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MariaDBDialect
    defer-datasource-initialization: 'true'
    hibernate:
      ddl-auto: create
    show-sql: 'true'
  datasource:
    password: ${MYSQL_PASSWORD:1234}
    username: ${MYSQL_USERNAME:root}
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DB:orders_service-db}?createDatabaseIfNotExist=true
  sql:
    init:
      mode: always
  #kafka properties
  kafka:
    bootstrap-servers:  ${KAFKA_URL:localhost:9092}
    template:
      default-topic: notificationTopic
      #providing to spring-boot project how to serialize this key & value pair into kafka-broker
      #we should define some serializers
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      #converting java object to json
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            type:
              mapping: event:com.example.orderservice.event.OrderPlacedEvent

management:
  health:
    circuit-breakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_SERVER:http://localhost:9411/api/v2/spans}

#resilience 4j
resilience4j:
  circuit breaker:
    instances:
      customers-service:
        registerHealthIndicator: true
        eventConsumerBufferSize: 10

        # to see all different state of circuit breaker(closed , open , half-open)
        #circuit breaker will make sure that it won't open the circuit breaker right away ,will wait for a number of
        #requests to fail, if the number of request are failing then he will change state from close to open
        slidingWindowType: COUNT_BASED

        # 50% of the calls are like failed then rate threshold you're setting it as 50%
        #after that we will configure how much time we can wait on the open state
        failureRateThreshold: 50

        # after 9 requests circuit breaker will change from close to open
        slidingWindowSize: 9
        #wait 5s before going from open state to half-open state
        waitDurationInOpenState: 5s

        # permitted number of calls in half open state , if the communication is still failing then
        #resillience-4j will change status from to open state
        permittedNumberOfCallsInHalfOpenState: 3

        minimumNumberOfCalls: 5

        # automatically change state from open to half-open
        automaticTransitionFromOpenToHalfOpenEnabled: true

      cars-service: # same config for cars-service
        registerHealthIndicator: true
        eventConsumerBufferSize: 10
        slidingWindowType: COUNT_BASED
        failureRateThreshold: 50
        slidingWindowSize: 9
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true

  #this fields for @Retry
  retry:
    instances:
      customers-service:
        waitDuration: 10s
        max-attempts: 6
      cars-service:
        waitDuration: 10s
        max-attempts: 10
  #uncomment this one if I use @RateLimiter, you should also uncomment @RateLimiter
#  rate-limiter:
#    instances:
#      customers-service:
#        register-health-indicator: false
#        limit-for-period: 10
#        limit-refresh-period: 10s
#        timeout-duration: 3s
#      cars-service:
#        register-health-indicator: false
#        limit-for-period: 10
#        limit-refresh-period: 10s
#        timeout-duration: 3s

logging:
  level:
    org:
      springframework:
        web:
          servlet:
            DispatcherServlet: DEBUG
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

feign:
  circuitbreaker:
    enabled: true
