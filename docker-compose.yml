version: '3.7'
services:




  #####################################################################################
              #DATABASES ( Postgres db, Mysql Maria db ,H2 db, Mongodb )
  #####################################################################################

  #Start running mysql-db for two databases (orders_service-db, vehicles_service-db)
  mysql-db:
    image: mysql:5.7
    container_name: mysql-db
    environment:
      MYSQLDB_USER: root
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASES: orders_service-db,vehicles-service-db
      MYSQL_USER: sa
    volumes:
      - .:/config
## bind mounting mysql databases
      - /c/data/mariadb:/var/lib/mysql
    ports:
      - "3306:3306"
    restart: unless-stopped
    networks:
      - micros
#  #Start running mysql-db for two databases (orders_service-db, vehicles_service-db)
#  #Start PHP MY ADMIN
  phpMyAdmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    container_name: phpMyAdmin
    environment:
      - PMA_ARBITRARY=1
    links:
      - mysql-db
    ports:
      - "7089:80"
    networks:
      - micros
  #Start PHP MY ADMIN

  #Start Mongo db
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - micros


 #End keycloak database
  #End mongodb
  #####################################################################################
        #SERVICES ( offices-service , cars-service , orders-service , customers-service )
        #I have added also oracle db , but it's docker image is deprecated so if you have it locally you should only remove the comments
  #####################################################################################

  # instrumentation can send trace data to. Scribe is disabled by default.
  zipkin-server:
    image: openzipkin/zipkin
    container_name: zipkin-server
    environment:
      - STORAGE_TYPE=mem
      #Uncomment to enable debug logging
      - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG -Dlogging.level.zipkin2=DEBUG
    ports:
      - "9411:9411"
    restart: on-failure
    networks:
      - micros
  # Start Consul server
  consul-server:
    image: consul:1.9.5
    container_name: consul-server
    restart: always
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    networks:
      - micros

  # Start Spring cloud config
  config-service:
    build: ./config-service
    container_name: config-service
    ports:
      - "8888:8888"
    environment:
      - CONSUL_HOST=consul-server
      - CONSUL_PORT=8500
    depends_on:
      - consul-server
    networks:
      - micros

  # Start Cars service
  cars-service:
    build: ./cars-service
    image: cars-service
    container_name: cars-service
    ports:
      - "8082:8082"
    environment:
      - MYSQL_HOST=mysql-db
      - MYSQL_PORT=3306
      - MYSQL_PASSWORD=1234
      - MYSQL_USERNAME=root
      - MYSQL_DB=vehicles-service-db
      - HOST_NAME=config-service
      - CONSUL_HOST=consul-server
      - CONSUL_PORT=8500
      - SPRING_CONFIG_PORT=8888
      - ZIPKIN_SERVER=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - consul-server
      - config-service
      - mysql-db
      - zipkin-server
    networks:
      - micros

  # Start orders service
  orders-service:
    build: ./orders-service
    container_name: orders-service
    ports:
      - "8081:8081"
    environment:
      - MYSQL_HOST=mysql-db
      - MYSQL_PORT=3306
      - MYSQL_PASSWORD=1234
      - MYSQL_USERNAME=root
      - MYSQL_DB=orders_service-db
      - HOST_NAME=config-service
      - CONSUL_HOST=consul-server
      - CONSUL_PORT=8500
      - SPRING_CONFIG_PORT=8888
      - ZIPKIN_SERVER=http://zipkin-server:9411/api/v2/spans
      - KAFKA_URL=broker:29092
    depends_on:
      - consul-server
      - config-service
      - mysql-db
      - zipkin-server
    restart: on-failure
    networks:
      - micros

  # Start Customers Service
  customers-service:
    build: ./customers-service
    container_name: customers-service
    ports:
      - "8083:8083"
    environment:
      - HOST_NAME=config-service
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - CONSUL_HOST=consul-server
      - CONSUL_PORT=8500
      - SPRING_CONFIG_PORT=8888
      - ZIPKIN_SERVER=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - consul-server
      - config-service
      - mongodb
      - zipkin-server
    networks:
      - micros
  #  #Start offices-service declaration
#  offices-service:
#    image: offices-service
#    container_name: offices-service
#    ports:
#      - "8084:8084"
#    environment:
#      - POSTGRES_HOST=postgres-db
#      - POSTGRES_PORT=5432
#      - OFFICES_DB=offices_service_db
#      - POSTGRES_PASSWORD=password
#      - POSTGRES_USERNAME=postgres
#      - HOST_NAME=config-service
#      - CONSUL_HOST=consul-server
#      - CONSUL_PORT=8500
#      - SPRING_CONFIG_PORT=8888
#      - ZIPKIN_SERVER=http://zipkin-server:9411/api/v2/spans
#      - KC_HOST=keycloak
#      - KC_PORT=8080
#    depends_on:
#      - consul-server
#      - config-service
#      - postgres-db
#      - zipkin-server
#      - keycloak
#    restart: on-failure
#    networks:
#      - micros
  # Start Gateway Service
  gateway-service:
    build: ./gateway-service
    container_name: gateway-service
    ports:
      - "9999:9999"
    environment:
      - HOST_NAME=config-service
      - CONSUL_HOST=consul-server
      - CONSUL_PORT=8500
      - SPRING_CONFIG_PORT=8888
      - ZIPKIN_SERVER=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - consul-server
      - config-service
      - zipkin-server
    restart: on-failure
    networks:
      - micros



  zookeeper: # used to orchestrate the kafka clusters
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000 # the interval at which ZooKeeper will expire the session
    networks:
      - micros
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - micros

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - micros
  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - micros
  #Start notification service
  notification-service:
    build: ./notification-service
    container_name: notification-service
    image: notification-service
    ports:
      - "8086:8086"
    environment:
      - HOST_NAME=config-service
      - SPRING_CONFIG_PORT=8888
      - CONSUL_HOST=consul-server
      - CONSUL_PORT=8500
      - ZIPKIN_SERVER=http://zipkin-server:9411/api/v2/spans
      - KAFKA_URL=broker:29092
    depends_on:
      - consul-server
      - zipkin-server
      - broker
    restart: on-failure
    networks:
      - micros
networks:
  micros:
    driver: bridge

volumes:
  dbvol:
